name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libeigen3-dev libgtest-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake eigen gtest

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pybind11

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake ..

    - name: Build
      run: |
        cd build
        make -j4

    - name: Run C++ tests
      run: |
        cd build
        ctest --output-on-failure

    - name: Run Python tests
      run: |
        cd build
        python -c "
        import sys
        sys.path.insert(0, '.')
        import cxml
        import numpy as np
        
        # Basic functionality test
        X = np.random.rand(50, 3).astype(np.float64)
        y = np.random.rand(50).astype(np.float64)
        
        # Test LinearRegression
        lr = cxml.linear_model.LinearRegression()
        lr.fit(X, y)
        y_pred = lr.predict(X)
        assert len(y_pred) == 50
        
        # Test KNN
        knn = cxml.neighbors.KNeighborsRegressor()
        knn.fit(X, y)
        y_pred_knn = knn.predict(X)
        assert len(y_pred_knn) == 50
        
        # Test preprocessing
        scaler = cxml.preprocessing.StandardScaler()
        scaler.fit(X, np.zeros(50))
        X_scaled = scaler.transform(X)
        assert X_scaled.shape == X.shape
        
        print('All basic tests passed!')
        "

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cxml-build-${{ matrix.os }}-python${{ matrix.python-version }}
        path: build/cxml*.so

  benchmark:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy scikit-learn matplotlib

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: cxml-build-ubuntu-latest-python3.11

    - name: Run benchmarks
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        import cxml
        import numpy as np
        import time
        from sklearn.linear_model import LinearRegression as SKLinearRegression
        from sklearn.neighbors import KNeighborsRegressor as SKKNeighborsRegressor
        
        print('Running performance benchmarks...')
        
        # Generate large dataset
        n_samples, n_features = 10000, 100
        X = np.random.randn(n_samples, n_features).astype(np.float64)
        y = np.random.randn(n_samples).astype(np.float64)
        
        # CxML LinearRegression
        start = time.time()
        lr_cxml = cxml.linear_model.LinearRegression()
        lr_cxml.fit(X, y)
        y_pred_cxml = lr_cxml.predict(X)
        cxml_time = time.time() - start
        
        # scikit-learn LinearRegression
        start = time.time()
        lr_sk = SKLinearRegression()
        lr_sk.fit(X, y)
        y_pred_sk = lr_sk.predict(X)
        sk_time = time.time() - start
        
        print(f'LinearRegression:')
        print(f'  CxML: {cxml_time:.4f}s')
        print(f'  scikit-learn: {sk_time:.4f}s')
        print(f'  Speedup: {sk_time/cxml_time:.2f}x')
        
        # CxML KNN
        start = time.time()
        knn_cxml = cxml.neighbors.KNeighborsRegressor(n_neighbors=5)
        knn_cxml.fit(X, y)
        y_pred_knn_cxml = knn_cxml.predict(X)
        cxml_knn_time = time.time() - start
        
        # scikit-learn KNN
        start = time.time()
        knn_sk = SKKNeighborsRegressor(n_neighbors=5)
        knn_sk.fit(X, y)
        y_pred_knn_sk = knn_sk.predict(X)
        sk_knn_time = time.time() - start
        
        print(f'KNeighborsRegressor:')
        print(f'  CxML: {cxml_knn_time:.4f}s')
        print(f'  scikit-learn: {sk_knn_time:.4f}s')
        print(f'  Speedup: {sk_knn_time/cxml_knn_time:.2f}x')
        "

  documentation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pybind11

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libeigen3-dev

    - name: Build documentation
      run: |
        mkdir build
        cd build
        cmake ..
        make -j4
        
        # Generate API documentation
        python -c "
        import sys
        sys.path.insert(0, '.')
        import cxml
        import inspect
        
        print('CxML API Documentation')
        print('=' * 50)
        
        modules = ['random', 'linear_model', 'neighbors', 'tree', 'preprocessing', 'metrics', 'model_selection', 'naive_bayes', 'cluster', 'decomposition']
        
        for module_name in modules:
            if hasattr(cxml, module_name):
                module = getattr(cxml, module_name)
                print(f'\n{module_name.upper()} MODULE')
                print('-' * 30)
                
                for name in dir(module):
                    if not name.startswith('_'):
                        obj = getattr(module, name)
                        if inspect.isclass(obj):
                            print(f'  {name} - Class')
                        elif inspect.isfunction(obj):
                            print(f'  {name} - Function')
                        else:
                            print(f'  {name} - {type(obj).__name__}')
        "
